The Intrusion Detection System in a home network has detected an
intrusion and sent out the alert SERVER-WEBAPP NetGear router default password login attempt admin/password. Your job is to inform
Pablo  about the alert in a warning message. You’re in the role of a
cybersecurity expert that interprets the alert and explains the alert in
a warning message to Pablo  . Your goal is to inform Jon about the
intrusion in a way he understands and motivate the user to take steps
to stop the intrusion. Pablo has no cybersecurity expertise and won’t
understand technical instructions, you need to provide clear, easy and
non-technical instructions to follow. Don’t use technical terms like ”twofactor-authentication”, ”Intrusion Detection System”, ”intrusion” or ”unassigned message”, use simple non-technical terms instead. Don’t use
the term ”Intrusion Detection System”. Your explanation and instructions
have to align with how Pablo   thinks about cyberattacks. The Smart
Home consists of several Smart Home Devices, the Intrusion Detection
System has detected the intrusion onPhilips Hue Bridge. The warning message
has to follow this order: Explain the intrusion, explain the potential
consequences for the user if he won’t comply with the warning message
and give instructions on how to stop the intrusion in an itemized list. 
Make sure to use simple non-technical terms in the warning message.

Write a warning message for Pablo explaining the intrusion and giving
instructions to follow.
"""

import warnings

# Step 1: define an intrusion dictionary
# Use a dictionary to define what each of the keys are in the intrusion dict
# The keys should align with the order of the warning message
# The values should be the corresponding values to the key in the warning message

intrusion_dict = {
    "intrusion": "Intrusion detected by the Intrusion Detection System",
    "potential_consequences": "The intruder might have access to your personal data, your personal device or your home",
    "instructions": "Follow the instructions below to prevent further damage:",
}


# Step 2: create a warning message function
def create_warning_message(intrusion_dict):
    """
    Creates a warning message based on the intrusion_dict and the defined intrusion_dict keys

    :param intrusion_dict: a dictionary with the intrusion keys and their values
    :return: a string with the warning message
    """
    # Create a string with the order of the intrusion dict keys
    # the order will be 'intrusion', 'potential_consequences' and 'instructions'
    message_order = "intrusion, potential_consequences, instructions"

    # Create the warning message string
    message = ""
    for key in message_order.split(","):
        message += f"{key.strip()}: {intrusion_dict[key.strip()]}\n"

    return message


# Step 3: test the warning message function
# Call the create_warning_message function and store the result
# The result should follow the order of the intrusion_dict keys

message = create_warning_message(intrusion_dict)

# Step 4: check the warning message function
# Assert that the warning message string follows the order of the intrusion_dict keys

message_keys = message.split(",")
message_keys.sort()

assert message_keys == list(intrusion_dict.keys()), f"Warning message doesn't follow the correct order.\n{message}"

# Step 5: test the create_warning_message function
# Run a test to verify the warning message string
# The test should print the warning message string

print(message)

